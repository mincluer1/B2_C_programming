---------------------------------------------------------
[E5] 第5章 関数(2) に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E5
学生番号： 37023448
氏名： 丸本　時麒斗
作成日： 2024/05/11


-----------------------------------------------
(E5_1)

学習内容：mの階乗を求めるプログラムを作成する

結果１：
int型で実行したもの
1! = 	1
2! = 	2
3! = 	6
4! = 	24
5! = 	120
省略）
24! = 	-775946240
25! = 	2076180480
26! = 	-1853882368
27! = 	1484783616
28! = 	-1375731712
29! = 	-1241513984
30! = 	1409286144

考察：
int型では、32bitの符号付き整数表示のみしかできないため、値がオーバーフローしてしまった場合、
値が正常に表示されなくなっていると考えられる。

結果2:
long long int型で実行したもの
1! = 	1
2! = 	2
3! = 	6
4! = 	24
5! = 	120
6! = 	720
省略
27! = 	-5483646897237262336
28! = 	-5968160532966932480
29! = 	-7055958792655077376
30! = 	-8764578968847253504

考察２：
long型では、64bitに増加するため表示できる値が21!までになったが、それでも値が大きすぎて
オーバフローしてしまった。

習得した内容・反省・考察など：
階乗は、ものすごい大きな数になってしまい、より大きな数字の状態を保持できるlonglongint型でもオーバーフローしてしまうことがわかった。

-----------------------------------------------
(E5_2) 

学習内容：Combiで値を求める関数を作成しよう

結果：
10C0 = 1
10C1 = 10
10C2 = 45
10C3 = 120
10C4 = 210
10C5 = 252
10C6 = 210
10C7 = 120
10C8 = 45
10C9 = 10
10C10 = 1

習得した内容・反省・考察など：
E5_1のコードを流用して、作成することができた。

-----------------------------------------------
(E5_3) 

学習内容：double型対応の冪乗を計算するプログラムを作成せよ

結果：
1.4
i = 0, 	powdbl = 1.000000 	pow = 1.000000
i = 1, 	powdbl = 1.400000 	pow = 1.400000
i = 2, 	powdbl = 1.960000 	pow = 1.960000
i = 3, 	powdbl = 2.744000 	pow = 2.744000
i = 4, 	powdbl = 3.841600 	pow = 3.841600
i = 5, 	powdbl = 5.378240 	pow = 5.378240
i = 6, 	powdbl = 7.529536 	pow = 7.529536
i = 7, 	powdbl = 10.541350 	pow = 10.541350
i = 8, 	powdbl = 14.757891 	pow = 14.757891
i = 9, 	powdbl = 20.661047 	pow = 20.661047
i = 10, 	powdbl = 28.925465 	pow = 28.925465


習得した内容・反省・考察など：
前回あたりで、int型に対して冪乗を計算するプログラムを作成したので、
そこまで難しくはなかったです。

-----------------------------------------------
(E5_4) 

学習内容：確立とくじの引く数から、当たる回数ごとの確立を求めよ

結果：
0.5
10
i = 0, 0.000977
i = 1, 0.009766
i = 2, 0.043945
i = 3, 0.117188
i = 4, 0.205078
i = 5, 0.246094
i = 6, 0.205078
i = 7, 0.117188
i = 8, 0.043945
i = 9, 0.009766
i = 10, 0.000977

習得した内容・反省・考察など：
関数を多数使用するので、少し迷ってしまった。main()よりもしたにある関数を呼ぶために、
プロトタイプ宣言をする必要があることもわかった。

-----------------------------------------------
(E5_5) 

学習内容：
互いに素である、数の組みを求めよ

結果：
13
27
(13, 14)
(13, 15)
(13, 16)
(13, 17)
(13, 18)
(13, 19)
(13, 20)
省略)
(25, 26)
(25, 27)
(26, 27)
70組

習得した内容・反省・考察など：
これも、同様にして最大公約数を求める関数を流用していけば作成することが
できた。

-----------------------------------------------
(E5_6) 

学習内容：平方根の値を、推測していき求めよう

結果：
6
3.5000000000 
2.6071428571 
2.4542563601 
2.4494943716 
2.4494897428 
2.449490

習得した内容・反省・考察など：
コードを実行しても、しっかり動作しているかどうかの確認ができないため正解であるかわからなかった。


-----------------------------------------------
(E5_7) 

学習内容：3乗根の、値をもとめよう。

結果：
x               r                r*r*r
0.000000	0.0004510930	0.0000000000
1.000000	1.0000000000	1.0000000000
2.000000	1.2599210499	2.0000000000
3.000000	1.4422495703	3.0000000000
4.000000	1.5874010520	4.0000000000
5.000000	1.7099759467	5.0000000000
6.000000	1.8171205928	6.0000000000
7.000000	1.9129311828	7.0000000000
8.000000	2.0000000000	8.0000000000
9.000000	2.0800838231	9.0000000000
10.000000	2.1544346900	10.0000000000

習得した内容・反省・考察など：
誤差を求める部分で、３乗根の部分を２乗根のもので設定していたため、無限ループ化して
CPU使用率が100%になることがありました。コードはちゃんと読んで理解してから、書いていこう
と思いました。

-----------------------------------------------
(E5_8) 

学習内容：二次方程式の、2つの実数解のうち大きい方の解を表示せよ

結果：
2
-8
3
2個の実数解のうち大きい方はx = 3.581139です。

習得した内容・反省・考察など：
関数の作成自体には、そこまで難しくなかったですが、複雑な四則演算の方で少し手間取ってしまいました。
括弧を乗り越えて、割り算をしてしまったりと色々ありましたが、それを込みで勉強していこうと思います。

-----------------------------------------------
(E5_9) 

学習内容：4つの値の最大値と最小値を求めよ。

結果：
120 1212 92 312
4つの入力値の最大値は、1212です。
4つの入力値の最小値は、92です。

習得した内容・反省・考察など：
今回は4つの数字の大小を求めることが課題でしたが、最大値・最小値ともに2つの値を比較する
関数を２回ずつ使用することで、簡潔に作成できるということがわかりました。これは、簡略な
アーキテクチャーを構築する上で大切になる技術だと考えられるので、すごいと感じました。

-----------------------------------------------
(E5_10) 

学習内容：グローバル変数かローカル変数のいずれかであるかを理解する。
また、変数に入る値を想像する。

想定結果： 
  (inc  1) a = 101   グローバル変数の　a
  (inc  2) b = 11   incのローカル変数　b
  (main 1) a = 10   mainののローカル変数　a
  (inc  1) a = 102  グローバル変数の　a
  (inc  2) b = 11   incのローカル変数　b
  (main 2) b = 20   mainのローカル変数 b
  (main 3) c = 102  mainのローカル変数　c

結果：
(inc  1) a = 101　グローバル変数の　a
(inc  2) b =  11　incのローカル変数　b
(main 1) a =  10　mainののローカル変数　a
(inc  1) a = 102　グローバル変数の　a
(inc  2) b =  21　incのローカル変数　b
(main 2) b =  20　mainのローカル変数　b
(main 3) c = 102　mainのローカル変数　c

習得した内容・反省・考察など：
(inc  2) b =  21の値だけ、想定と異なっていた。これは、代入するときの値が、bであるにもかかわらず、
１回目の( inc 2 )に引っ張られてしまったためだと考えられる。

-----------------------------------------------
(E5_11*) 

学習内容： e^x　の計算を行え。

結果：
x                   myexp(x)
1.000000	      2.71828
2.000000	      7.38906
3.000000	     20.08554
4.000000	     54.59815
5.000000	    148.41316
6.000000	    403.42879
7.000000	   1096.63316
8.000000	   2980.95799
9.000000	   8103.08393
10.000000	  22026.46579

習得した内容・反省・考察など：
自分で作成した関数では、値がオーバーフローしてしまい正確な値が出力されなかったが、
モジュールを使用した関数を呼び出すことで、正常な処理を行うようになった。
やはり、モジュールを使用する方が正しい出力がなされることがわかった。

-----------------------------------------------
[E5] 全体に対する感想などを以下に記すこと．
所要時間： （    6    ）時間

今回の課題は、かなり自由性が高くてとても楽しいものだった。しかし、
c言語の自分の実力の不足感を感じるものであった。
さらに、頑張ってC言語でできることできないことを勉強していきたいと感じました。

